[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Urmom",
    "section": "",
    "text": "This is urmom. We’re now going to upgrade,\nTo learn more about Quarto websites visit https://quarto.org/docs/websites. ## Why do we do this\nMake presentations and documents out of markdown easyily in one combined workflow"
  },
  {
    "objectID": "index.html#why-do-we-do-this",
    "href": "index.html#why-do-we-do-this",
    "title": "LLMTESTAWESOME",
    "section": "Why do we do this",
    "text": "Why do we do this\nMake presentations and documents out of markdown easyily in one combined workflow"
  },
  {
    "objectID": "index.html#tools-needed",
    "href": "index.html#tools-needed",
    "title": "Urmom",
    "section": "Tools needed",
    "text": "Tools needed\nhttps://quarto.org/docs/get-started/ – Quarto: https://quarto.org/ Windows: Linux: chmod u+x dpkg -i filename"
  },
  {
    "objectID": "index.html#extensions-needed",
    "href": "index.html#extensions-needed",
    "title": "Urmom",
    "section": "extensions needed",
    "text": "extensions needed\npython3 – Visual Studio Code Quarto Extensions:\n\npython packages needed.\nmatplotlib numpy pyplot seaborn2 nbformat pyyaml jupyter quarto install tinytex\n\npython -m venv .venv\n .\\.venv\\Scripts\\activate\nlinux: source ./.venv/bin.activate \nconda \nthen Pip install matplotlib seaborn nbformat pyyaml jupyter Something go wrong? Kill the .venv folder and start with all the commands numpy\nquarto preview .\npress cntrl + shift + P add visual mode\nIT”S ALIVEEEE\n\n# HashPipe is metadata not a comment, hash is a comment. Don't smoke comments.\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n\n# Define the range for the input data\nx = np.linspace(-10, 10, 100)\nplt.figure(figsize=(5, 3))\nplt.plot(x, sigmoid(x), label=\"Sigmoid\")\nplt.title(\"SigmoidFunction\")\nplt.xlabel(\"x\")\nplt.ylabel(\"f(x)\")\nplt.grid(True) \n\n\n\n\n\n\n\nFigure 1: Sigmoid"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html#python",
    "href": "index.html#python",
    "title": "Urmom",
    "section": "python",
    "text": "python\n\n\n\n\n\n\n\n\n\nFigure 2: Mish\n\n\n\n\n\nSource: ActivationFunctions.ipynb\n\\[\n\\text{Mish}(x) = x \\cdot \\tanh(\\text{Softplus}(x))\n\\]"
  },
  {
    "objectID": "ActivationFunctions.html",
    "href": "ActivationFunctions.html",
    "title": "LLMTESTAWESOME",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the range for the input data\nx = np.linspace(-10, 10, 100)\nimport numpy as np\n\ndef identity(x):\n    \"\"\"\n    Compute the Identity activation function.\n\n    Parameters:\n    x : A scalar or numpy array.\n\n    Returns:\n    numpy array : the input itself, unmodified.\n    \"\"\"\n    return x\n\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n\ndef tanh(x):\n    \"\"\"\n    Compute the hyperbolic tangent of x.\n\n    Parameters:\n    x : A scalar or numpy array.\n\n    Returns:\n    numpy array : Hyperbolic tangent function output.\n    \"\"\"\n    return np.tanh(x)\n\ndef relu(x):\n    \"\"\"\n    Compute the Rectified Linear Unit activation of x.\n\n    Parameters:\n    x : A scalar or numpy array.\n\n    Returns:\n    numpy array : ReLU function output where negative values are zero.\n    \"\"\"\n    return np.maximum(0, x)\n\ndef leaky_relu(x, alpha=0.01):\n    \"\"\"\n    Compute the Leaky Rectified Linear Unit activation of x.\n\n    Parameters:\n    x : A scalar or numpy array.\n    alpha : Slope of the negative part of the function.\n\n    Returns:\n    numpy array : Leaky ReLU function output.\n    \"\"\"\n    return np.where(x &gt; 0, x, x * alpha)\n\ndef arctan(x):\n    \"\"\"\n    Compute the arctangent of x.\n\n    Parameters:\n    x : A scalar or numpy array.\n\n    Returns:\n    numpy array : ArcTan function output.\n    \"\"\"\n    return np.arctan(x)\n\ndef softplus(x):\n    \"\"\"\n    Compute the Softplus activation of x.\n\n    Parameters:\n    x : A scalar or numpy array.\n\n    Returns:\n    numpy array : Softplus function output.\n    \"\"\"\n    return np.log1p(np.exp(x))\n\ndef mish(x):\n    \"\"\"\n    Compute the Mish activation of x.\n\n    Parameters:\n    x : A scalar or numpy array.\n\n    Returns:\n    numpy array : Mish function output, derived as x * tanh(softplus(x)).\n    \"\"\"\n    return x * np.tanh(softplus(x))\n\ndef selu(x, alpha=1.6732632423543772848170429916717, scale=1.0507009873554804934193349852946):\n    \"\"\"\n    Compute the Scaled Exponential Linear Unit activation of x.\n\n    Parameters:\n    x : A scalar or numpy array.\n    alpha : Scale for the negative factor.\n    scale : Scale for the positive factor.\n\n    Returns:\n    numpy array : SELU function output.\n    \"\"\"\n    return scale * np.where(x &gt; 0, x, alpha * (np.exp(x) - 1))\n\ndef silu(x):\n    \"\"\"\n    Compute the Sigmoid Linear Unit (SiLU) activation of x, also known as Swish.\n\n    Parameters:\n    x : A scalar or numpy array.\n\n    Returns:\n    numpy array : SiLU function output, derived as x / (1 + exp(-x)).\n    \"\"\"\n    return x / (1 + np.exp(-x))\n\ndef softmax(x):\n    \"\"\"\n    Compute the SoftMax activation of x, typically used for multi-class classification.\n\n    Parameters:\n    x : A scalar or numpy array.\n\n    Returns:\n    numpy array : SoftMax function output.\n    \"\"\"\n    e_x = np.exp(x - np.max(x))\n    return e_x / e_x.sum()\n\ndef softsign(x):\n    \"\"\"\n    Compute the SoftSign activation of x.\n\n    Parameters:\n    x : A scalar or numpy array.\n\n    Returns:\n    numpy array : SoftSign function output, derived as x / (1 + |x|).\n    \"\"\"\n    return x / (1 + np.abs(x))\n\ndef elu(x, alpha=1.0):\n    \"\"\"\n    Compute the Exponential Linear Unit activation of x.\n\n    Parameters:\n    x : A scalar or numpy array.\n    alpha : The scaling factor for negative inputs.\n\n    Returns:\n    numpy array : ELU function output.\n    \"\"\"\n    return np.where(x &gt;= 0, x, alpha * (np.exp(x) - 1))\n\ndef prelu(x, alpha=0.01):\n    \"\"\"\n    Compute the Parametric Rectified Linear Unit activation of x.\n\n    Parameters:\n    x : A scalar or numpy array.\n    alpha : The learned parameter that scales the output when x is negative.\n\n    Returns:\n    numpy array : PReLU function output.\n    \"\"\"\n    return np.where(x &gt;= 0, x, alpha * x)\n\ndef gelu(x):\n    \"\"\"\n    Compute the Gaussian Error Linear Unit activation of x.\n\n    Parameters:\n    x : A scalar or numpy array.\n\n    Returns:\n    numpy array : GELU function output, derived using the Gaussian distribution function for smoothing.\n    \"\"\"\n    return 0.5 * x * (1 + np.tanh(np.sqrt(2 / np.pi) * (x + 0.044715 * np.power(x, 3))))\n\ndef sqnl(x):\n    \"\"\"\n    Compute the Square Nonlinearity (SQNL) activation function.\n\n    Parameters:\n    x : A scalar or numpy array.\n\n    Returns:\n    numpy array : SQNL function output, which is bounded between -1 and 1.\n    \"\"\"\n    return np.where(x &gt; 2, 1, np.where(x &gt;= 0, x - (x**2) / 4, np.where(x &gt;= -2, x + (x**2) / 4, -1)))\n\n\ndef swish(x):\n    \"\"\"\n    Compute the Swish activation function, also known as the Sigmoid Linear Unit (SiLU).\n\n    Parameters:\n    x : A scalar or numpy array.\n\n    Returns:\n    numpy array : Swish function output. The function is unbounded above and bounded below by zero.\n    \"\"\"\n    return x * sigmoid(x)\n\n\nplt.figure(figsize=(12, 8))\n\nrows = 3\ncolumns = 4\n\n\nplt.subplot(rows, columns, 1)\nplt.plot(x, identity(x), label=\"Identity\")\nplt.title(\"Identity\")\nplt.grid(True)\n\nplt.subplot(rows, columns, 2)\nplt.plot(x, sigmoid(x), label=\"Sigmoid\")\nplt.title(\"Sigmoid\")\nplt.grid(True)\n\nplt.subplot(rows, columns, 3)\nplt.plot(x, tanh(x), label=\"Tanh\")\nplt.title(\"Tanh\")\nplt.grid(True)\n\nplt.subplot(rows, columns, 4)\nplt.plot(x, selu(x), label=\"SeLU\")\nplt.title(\"SeLU\")\nplt.grid(True)\n\nplt.subplot(rows, columns, 5)\nplt.plot(x, softmax(x), label=\"SoftMax\")\nplt.title(\"SoftMax\")\nplt.grid(True)\n\nplt.subplot(rows, columns, 6)\nplt.plot(x, softsign(x), label=\"SoftSign\")\nplt.title(\"SoftSign\")\nplt.grid(True)\n\nplt.subplot(rows, columns, 7)\nplt.plot(x, mish(x), label=\"Mish\")\nplt.title(\"Mish\")\nplt.grid(True)\n\n\nplt.subplot(rows, columns, 8)\nplt.plot(x, swish(x), label=\"Swish\")\nplt.title(\"Swish\")\nplt.grid(True)\n\n\nplt.subplot(rows, columns, 9)\nplt.plot(x, arctan(x), label=\"arctan\")\nplt.title(\"ArcTan\")\nplt.grid(True)\n\nplt.subplot(rows, columns, 10)\nplt.plot(x, silu(x), label=\"silu\")\nplt.title(\"SiLU\")\nplt.grid(True)\n\nplt.subplot(rows, columns, 11)\nplt.plot(x, gelu(x), label=\"gelu\")\nplt.title(\"GeLU\")\nplt.grid(True)\n\nplt.subplot(rows, columns, 12)\nplt.plot(x, sqnl(x), label=\"SQNL\")\nplt.title(\"SQNL\")\nplt.grid(True)\n\n# Add a legend\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\nFigure 1: Overview\n\n\n\n\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the activation functions as described previously\n# Define x as input values\nx = np.linspace(-10, 10, 200)\n\n\nplt.figure(figsize=(5, 3))\n\nplt.plot(x, identity(x), label=\"Identity\")\nplt.title(\"Identity Function\")\nplt.xlabel(\"x\")\nplt.ylabel(\"f(x)\")\nplt.grid(True)\n\n\n\n\n\n\n\nFigure 2: Identity\n\n\n\n\n\n\nplt.figure(figsize=(5, 3))\nplt.plot(x, sigmoid(x), label=\"Sigmoid\")\nplt.title(\"Sigmoid\")\nplt.xlabel(\"x\")\nplt.ylabel(\"f(x)\")\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\nFigure 3: Sigmoid Functions\n\n\n\n\n\n\nplt.figure(figsize=(5, 3))\nplt.plot(x, tanh(x), label=\"Tanh\")\nplt.title(\"Tanh\")\nplt.xlabel(\"x\")\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\nFigure 4: Hyperbolic Tangent\n\n\n\n\n\n\nplt.figure(figsize=(5, 3))\nplt.plot(x, arctan(x), label=\"Arctan\")\nplt.title(\"Arctan\")\nplt.xlabel(\"x\")\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\nFigure 5: Arc Tangent\n\n\n\n\n\n\nplt.figure(figsize=(5, 3))\n# 3. Hyperbolic Tangent Functions\nplt.plot(x, softsign(x), label=\"SoftSign\")\nplt.title(\"SoftSign\")\nplt.xlabel(\"x\")\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\nFigure 6: SoftSign\n\n\n\n\n\n\nplt.figure(figsize=(5, 3))\n# 3. Hyperbolic Tangent Functions\nplt.plot(x, softmax(x), label=\"SoftMax\")\nplt.title(\"SoftMax\")\nplt.xlabel(\"x\")\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\nFigure 7: SoftMax\n\n\n\n\n\n\nplt.figure(figsize=(5, 3))\n# 3. Hyperbolic Tangent Functions\nplt.plot(x, softplus(x), label=\"SoftPlus\")\nplt.title(\"SoftPlus\")\nplt.xlabel(\"x\")\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\nFigure 8: SoftPlus\n\n\n\n\n\n\nplt.figure(figsize=(5, 3))\nplt.plot(x, relu(x), label=\"ReLU\")\nplt.plot(x, leaky_relu(x), label=\"Leaky ReLU\")\nplt.plot(x, prelu(x, 0.01), label=\"PReLU\")\nplt.plot(x, elu(x), label=\"ELU\")\nplt.plot(x, selu(x), label=\"SELU\")\nplt.title(\"ReLU and Variants\")\nplt.xlabel(\"x\")\nplt.grid(True)\nplt.tight_layout()\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\nFigure 9: ReLU and Variants\n\n\n\n\n\n\nplt.figure(figsize=(5, 3))\nplt.plot(x, relu(x), label=\"ReLU\")\nplt.title(\"ReLU\")\nplt.xlabel(\"x\")\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\nFigure 10: ReLU and Variants\n\n\n\n\n\n\nplt.figure(figsize=(5, 3))\nplt.plot(x, leaky_relu(x), label=\"Leaky ReLU\")\nplt.title(\"Leaky-ReLU\")\nplt.xlabel(\"x\")\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\nFigure 11: Leaky Relu\n\n\n\n\n\n\nplt.figure(figsize=(5, 3))\nplt.plot(x, prelu(x, 0.01), label=\"PReLU\")\nplt.title(\"PReLU\")\nplt.xlabel(\"x\")\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\nFigure 12: PReLU\n\n\n\n\n\n\nplt.figure(figsize=(5, 3))\nplt.plot(x, elu(x), label=\"ELU\")\nplt.title(\"ELU\")\nplt.xlabel(\"x\")\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\nFigure 13: ELU\n\n\n\n\n\n\nplt.figure(figsize=(5, 3))\nplt.plot(x, silu(x), label=\"SILU\")\nplt.title(\"SILU\")\nplt.xlabel(\"x\")\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\nFigure 14: SILU\n\n\n\n\n\n\nplt.figure(figsize=(5, 3))\nplt.plot(x, selu(x), label=\"SELU\")\nplt.title(\"SELU\")\nplt.xlabel(\"x\")\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\nFigure 15: SELU\n\n\n\n\n\n\nplt.figure(figsize=(5, 3))\nplt.plot(x, gelu(x), label=\"GeLU\")\nplt.title(\"GeLU\")\nplt.xlabel(\"x\")\nplt.grid(True)\n\n# Adjust layout and show the plot\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\nFigure 16: GeLU\n\n\n\n\n\n\nplt.figure(figsize=(5, 3))\nplt.plot(x, mish(x), label=\"Mish\")\nplt.title(\"Mish\")\nplt.xlabel(\"x\")\nplt.grid(True)\n# Adjust layout and show the plot\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\nFigure 17: Mish\n\n\n\n\n\n\nplt.figure(figsize=(5, 3))\nplt.plot(x, swish(x), label=\"Swish\")\nplt.title(\"Swish\")\nplt.xlabel(\"x\")\nplt.grid(True)\n# Adjust layout and show the plot\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\nFigure 18: Swish\n\n\n\n\n\n\nplt.plot(x, sqnl(x), label=\"SQNL\")\nplt.title(\"SQNL\")\nplt.xlabel(\"x\")\nplt.grid(True)\nplt.legend()\n# Adjust layout and show the plot\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\nFigure 19: SQNL\n\n\n\n\n\n\n# 5. Advanced Non-linear Functions\nplt.plot(x, mish(x), label=\"Mish\")\nplt.plot(x, sqnl(x), label=\"SQNL\")\nplt.plot(x, gelu(x), label=\"GeLU\")\nplt.title(\"Advanced Non-linear Functions\")\nplt.xlabel(\"x\")\nplt.grid(True)\nplt.legend()\n# Adjust layout and show the plot\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\nFigure 20: Advanced Non-linear Functions\n\n\n\n\n\n\n# Corrected Maxout function\ndef maxout_demo(x):\n    weights = np.array([[1, -0.5], [0.5, 1]])  # Two sets of weights for two neurons\n    biases = np.array([0.5, -0.5])  # Biases for each set\n    x_reshaped = np.tile(x, (2, 1)).T  # Duplicate x to match weight shape\n    neuron_outputs = np.dot(x_reshaped, weights.T) + biases\n    return np.max(neuron_outputs, axis=1)\n\n# Plotting the activation functions\nplt.figure(figsize=(5,3))\nplt.plot(x, maxout_demo(x), label=\"Maxout\")\nplt.title(\"Maxout\")\nplt.xlabel(\"x\")\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\nFigure 21: Maxout plot"
  },
  {
    "objectID": "index_slideshow.html#tools-needed",
    "href": "index_slideshow.html#tools-needed",
    "title": "Urmom",
    "section": "Tools needed",
    "text": "Tools needed\nhttps://quarto.org/docs/get-started/ – Quarto: https://quarto.org/ Windows: Linux: chmod u+x dpkg -i filename"
  },
  {
    "objectID": "index_slideshow.html#extensions-needed",
    "href": "index_slideshow.html#extensions-needed",
    "title": "Urmom",
    "section": "extensions needed",
    "text": "extensions needed\npython3 – Visual Studio Code Quarto Extensions:\npython packages needed.\nmatplotlib numpy pyplot seaborn2 nbformat pyyaml jupyter quarto install tinytex\n\npython -m venv .venv\n .\\.venv\\Scripts\\activate\nlinux: source ./.venv/bin.activate \nconda \nthen Pip install matplotlib seaborn nbformat pyyaml jupyter Something go wrong? Kill the .venv folder and start with all the commands numpy\nquarto preview .\npress cntrl + shift + P add visual mode\nIT”S ALIVEEEE\n\n\n\n\n\n\n\n\nFigure 1: Sigmoid"
  },
  {
    "objectID": "index_slideshow.html#python",
    "href": "index_slideshow.html#python",
    "title": "Urmom",
    "section": "python",
    "text": "python\n\n\n\n\n\n\n\n\n\nFigure 2: Mish\n\n\n\n\n\n\n\\[\n\\text{Mish}(x) = x \\cdot \\tanh(\\text{Softplus}(x))\n\\]"
  },
  {
    "objectID": "TreeOfThoughts.html",
    "href": "TreeOfThoughts.html",
    "title": "Tree of thoughts",
    "section": "",
    "text": "%pip install langchain langchain_community \n\nRequirement already satisfied: langchain in .\\.venv\\lib\\site-packages (0.1.16)\nRequirement already satisfied: langchain_community in .\\.venv\\lib\\site-packages (0.0.34)\nRequirement already satisfied: PyYAML&gt;=5.3 in .\\.venv\\lib\\site-packages (from langchain) (6.0.1)\nRequirement already satisfied: SQLAlchemy&lt;3,&gt;=1.4 in .\\.venv\\lib\\site-packages (from langchain) (2.0.30)\nRequirement already satisfied: aiohttp&lt;4.0.0,&gt;=3.8.3 in .\\.venv\\lib\\site-packages (from langchain) (3.9.5)\nRequirement already satisfied: dataclasses-json&lt;0.7,&gt;=0.5.7 in .\\.venv\\lib\\site-packages (from langchain) (0.6.5)\nRequirement already satisfied: jsonpatch&lt;2.0,&gt;=1.33 in .\\.venv\\lib\\site-packages (from langchain) (1.33)\nRequirement already satisfied: langchain-core&lt;0.2.0,&gt;=0.1.42 in .\\.venv\\lib\\site-packages (from langchain) (0.1.52)\nRequirement already satisfied: langchain-text-splitters&lt;0.1,&gt;=0.0.1 in .\\.venv\\lib\\site-packages (from langchain) (0.0.1)\nRequirement already satisfied: langsmith&lt;0.2.0,&gt;=0.1.17 in .\\.venv\\lib\\site-packages (from langchain) (0.1.56)\nRequirement already satisfied: numpy&lt;2,&gt;=1 in .\\.venv\\lib\\site-packages (from langchain) (1.26.4)\nRequirement already satisfied: pydantic&lt;3,&gt;=1 in .\\.venv\\lib\\site-packages (from langchain) (2.7.1)\nRequirement already satisfied: requests&lt;3,&gt;=2 in .\\.venv\\lib\\site-packages (from langchain) (2.31.0)\nRequirement already satisfied: tenacity&lt;9.0.0,&gt;=8.1.0 in .\\.venv\\lib\\site-packages (from langchain) (8.3.0)\nRequirement already satisfied: aiosignal&gt;=1.1.2 in .\\.venv\\lib\\site-packages (from aiohttp&lt;4.0.0,&gt;=3.8.3-&gt;langchain) (1.3.1)\nRequirement already satisfied: attrs&gt;=17.3.0 in .\\.venv\\lib\\site-packages (from aiohttp&lt;4.0.0,&gt;=3.8.3-&gt;langchain) (23.2.0)\nRequirement already satisfied: frozenlist&gt;=1.1.1 in .\\.venv\\lib\\site-packages (from aiohttp&lt;4.0.0,&gt;=3.8.3-&gt;langchain) (1.4.1)\nRequirement already satisfied: multidict&lt;7.0,&gt;=4.5 in .\\.venv\\lib\\site-packages (from aiohttp&lt;4.0.0,&gt;=3.8.3-&gt;langchain) (6.0.5)\nRequirement already satisfied: yarl&lt;2.0,&gt;=1.0 in .\\.venv\\lib\\site-packages (from aiohttp&lt;4.0.0,&gt;=3.8.3-&gt;langchain) (1.9.4)\nRequirement already satisfied: marshmallow&lt;4.0.0,&gt;=3.18.0 in .\\.venv\\lib\\site-packages (from dataclasses-json&lt;0.7,&gt;=0.5.7-&gt;langchain) (3.21.2)\nRequirement already satisfied: typing-inspect&lt;1,&gt;=0.4.0 in .\\.venv\\lib\\site-packages (from dataclasses-json&lt;0.7,&gt;=0.5.7-&gt;langchain) (0.9.0)\nRequirement already satisfied: jsonpointer&gt;=1.9 in .\\.venv\\lib\\site-packages (from jsonpatch&lt;2.0,&gt;=1.33-&gt;langchain) (2.4)\nRequirement already satisfied: packaging&lt;24.0,&gt;=23.2 in .\\.venv\\lib\\site-packages (from langchain-core&lt;0.2.0,&gt;=0.1.42-&gt;langchain) (23.2)\nRequirement already satisfied: orjson&lt;4.0.0,&gt;=3.9.14 in .\\.venv\\lib\\site-packages (from langsmith&lt;0.2.0,&gt;=0.1.17-&gt;langchain) (3.10.3)\nRequirement already satisfied: annotated-types&gt;=0.4.0 in .\\.venv\\lib\\site-packages (from pydantic&lt;3,&gt;=1-&gt;langchain) (0.6.0)\nRequirement already satisfied: pydantic-core==2.18.2 in .\\.venv\\lib\\site-packages (from pydantic&lt;3,&gt;=1-&gt;langchain) (2.18.2)\nRequirement already satisfied: typing-extensions&gt;=4.6.1 in .\\.venv\\lib\\site-packages (from pydantic&lt;3,&gt;=1-&gt;langchain) (4.11.0)\nRequirement already satisfied: charset-normalizer&lt;4,&gt;=2 in .\\.venv\\lib\\site-packages (from requests&lt;3,&gt;=2-&gt;langchain) (3.3.2)\nRequirement already satisfied: idna&lt;4,&gt;=2.5 in .\\.venv\\lib\\site-packages (from requests&lt;3,&gt;=2-&gt;langchain) (3.7)\nRequirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in .\\.venv\\lib\\site-packages (from requests&lt;3,&gt;=2-&gt;langchain) (2.2.1)\nRequirement already satisfied: certifi&gt;=2017.4.17 in .\\.venv\\lib\\site-packages (from requests&lt;3,&gt;=2-&gt;langchain) (2024.2.2)\nRequirement already satisfied: greenlet!=0.4.17 in .\\.venv\\lib\\site-packages (from SQLAlchemy&lt;3,&gt;=1.4-&gt;langchain) (3.0.3)\nRequirement already satisfied: mypy-extensions&gt;=0.3.0 in .\\.venv\\lib\\site-packages (from typing-inspect&lt;1,&gt;=0.4.0-&gt;dataclasses-json&lt;0.7,&gt;=0.5.7-&gt;langchain) (1.0.0)\nNote: you may need to restart the kernel to use updated packages.\nfrom langchain.prompts import ChatPromptTemplate, PromptTemplate\nfrom langchain_community.llms.ollama import Ollama\nfrom langchain.llms.openai import OpenAIChat\nfrom langchain_core.output_parsers.string import StrOutputParser\nimport pandas as pd\nfrom IPython.display import display, Markdown\nllm = Ollama(model=\"phi3:latest\", num_ctx=4096, num_predict=1024, temperature=0.1)\n#llm = OpenAIChat(model=\"gpt-4\", temperature=0.1)\nquestion = \"How to establish the genealogy of the families in the graph?\"\nimport json\n\ndef load_graph(file):\n    with open(file) as f:\n        data = json.load(f)\n\n    text = \"```mermaid\\ngraph LR\\n\"\n    for item in data[\"links\"]:\n        text += f'\\t{item[\"source\"]} -- {item[\"value\"]} --&gt; {item[\"target\"]}\\n'\n    text += \"```\"\n    return text\ntext = load_graph(\"miserables_1.json\")\n\ngraph_length = len(text)\n\nprint(f\"Graph length: {graph_length}\")\n\nGraph length: 427\n#display(Markdown(text))\ndisplay(text)\n\n'```mermaid\\ngraph LR\\n\\tNapoleon -- 1 --&gt; Myriel\\n\\tMlle.Baptistine -- 8 --&gt; Myriel\\n\\tMme.Magloire -- 10 --&gt; Myriel\\n\\tMme.Magloire -- 6 --&gt; Mlle.Baptistine\\n\\tCountessdeLo -- 1 --&gt; Myriel\\n\\tGeborand -- 1 --&gt; Myriel\\n\\tChamptercier -- 1 --&gt; Myriel\\n\\tCravatte -- 1 --&gt; Myriel\\n\\tCount -- 2 --&gt; Myriel\\n\\tOldMan -- 1 --&gt; Myriel\\n\\tValjean -- 1 --&gt; Labarre\\n\\tValjean -- 3 --&gt; Mme.Magloire\\n\\tValjean -- 3 --&gt; Mlle.Baptistine\\n\\tValjean -- 5 --&gt; Myriel\\n```'"
  },
  {
    "objectID": "TreeOfThoughts.html#evaluate-pathways",
    "href": "TreeOfThoughts.html#evaluate-pathways",
    "title": "Tree of thoughts",
    "section": "Evaluate Pathways",
    "text": "Evaluate Pathways\n\nprompt_evaluate = ChatPromptTemplate.from_template(\"\"\"\n## 3. Evaluate pathways:\n    Given the thoughts and the data, please evaluate the pathways to  {question}.\n    DO NOT answer the question yet.\n    DO ONLY format your output as 'markdown'.\n                                                   \n### Processed data\n{data}\n                                                   \n### List of thoughts\n{thoughts}\n                                                         \n### Question\n{question}\n\n\"\"\")\n\nchain_evaluate  = prompt_evaluate | llm | StrOutputParser()\nevaluation = chain_evaluate.invoke({\n    \"data\": text,\n    \"thoughts\": listOfThoughts,\n    \"question\": question\n    })\n\ndisplay(Markdown(evaluation))\n\n\nTo evaluate pathways for establishing the genealogy of the families in the given graph, we can follow these steps:\n\n1. **Identify Key Nodes**: Begin by identifying nodes that appear multiple times or have numerous connections to other nodes as they may represent central figures like Myriel and Valjean.\n\n2. **Analyze Direct Connections**: Examine direct links (edges) between individuals, such as the ones connecting Napoleon, Mlle. Baptistine, Mme. Magloire, Countess de Lo, Geborand, Champtercier, Cravatte, and Myriel to determine immediate familial relationships.\n\n3. **Trace Ancestral Links**: Look for patterns where individuals like Valjean are connected to multiple nodes (e.g., Mme. Magloire, Mlle. Baptistine), which could indicate ancestral or relative ties.\n\n4. **Consider Relative Proximity and Frequency of Connections**: The number of connections a node has can suggest the prominence of an individual within the family structure. For instance, Myriel's numerous links may imply his central role in this genealogy.\n\n5. **Map Out Family Tree Structure**: Based on the analysis above, begin to map out potential relationships and construct a tree-like diagram that represents the families' genealogy within the graph.\n\n6. **Validate Relationships**: Cross-reference identified familial connections with historical or contextual information (if available) to validate the proposed genealogical pathways."
  },
  {
    "objectID": "TreeOfThoughts.html#synthesize-pathway-evaluation",
    "href": "TreeOfThoughts.html#synthesize-pathway-evaluation",
    "title": "Tree of thoughts",
    "section": "Synthesize Pathway Evaluation",
    "text": "Synthesize Pathway Evaluation\n\nprompt_synthesize_evaluate = ChatPromptTemplate.from_template(\"\"\"\n## 4. Evaluate pathways:\n    Synthesize the data gathered from the inputs, thoughts list, and evaluation pathways\n    Create a comprehensive plan for answering the question: {question}.\n    DO NOT answer the question yet.\n    DO ONLY format your output as 'JSON' dictionary of key value pairs.\n                                                              \n                                                   \n### Processed data\n{data}\n                                                   \n### List of thoughts\n{thoughts}\n\n### Pathways evaluation\n{evaluation}\n                                                         \n### Question\n{question}\n\n\"\"\")\n\nchain_synthesize_evaluate  = prompt_synthesize_evaluate | llm | StrOutputParser()\nsynthesis = chain_synthesize_evaluate.invoke({\n    \"data\": text,\n    \"thoughts\": listOfThoughts,\n    \"evaluation\": evaluation,\n    \"question\": question\n    })\n\n\n\ndisplay(Markdown(synthesis))\n\n{\n    \"key_thoughts\": [\n        \"Identify central figures\",\n        \"Analyze direct familial connections\",\n        \"Trace ancestral links\",\n        \"Consider relative prominence\",\n        \"Map family tree structure\",\n        \"Validate relationships\"\n    ],\n    \"evaluation_pathways\": [\n        {\n            \"step\": \"Identify Key Nodes\",\n            \"description\": \"Central figures like Myriel and Valjean are identified due to multiple connections.\"\n        },\n        {\n            \"step\": \"Analyze Direct Connections\",\n            \"description\": \"Examine direct links between individuals for immediate familial relationships.\"\n        },\n        {\n            \"step\": \"Trace Ancestral Links\",\n            \"description\": \"Look for patterns where Valjean is connected to multiple nodes, indicating ancestral ties.\"\n        },\n        {\n            \"step\": \"Consider Relative Proximity and Frequency of Connections\",\n            \"description\": \"Assess the number of connections a node has as an indicator of individual prominence within the family structure.\"\n        },\n        {\n            \"step\": \"Map Out Family Tree Structure\",\n            \"description\": \"Construct a tree-like diagram representing the genealogy based on analyzed data.\"\n        },\n        {\n            \"step\": \"Validate Relationships\",\n            \"description\": \"Cross-reference identified connections with historical or contextual information to confirm accuracy.\"\n        }\n    ]\n}"
  },
  {
    "objectID": "TreeOfThoughts.html#formulate-conclusions",
    "href": "TreeOfThoughts.html#formulate-conclusions",
    "title": "Tree of thoughts",
    "section": "Formulate Conclusions",
    "text": "Formulate Conclusions\n\nprompt_formulate = ChatPromptTemplate.from_template(\"\"\"\n## 5. Formulate answer:\n    Given the synthesized data, please formulate a final answer to the question: {question}.\n    DO NOT mention thoughts or evaluation pathways, only formulate the final answer to the user.\n    DO create a comprehensive and engaging article using markdown syntax, with sections and subsections.\n                                                   \n### Synthesis                                   \n{synthesis}\n                                                         \n### Question\n{question}\n\n\"\"\")\n\nchain_formulate  = prompt_formulate | llm | StrOutputParser()\nsynthesis = chain_formulate.invoke({\n    \"synthesis\": synthesis,\n    \"question\": question\n    })\n\ndisplay(Markdown(synthesis))\n\nTo establish the genealogy of families in a graph, follow these steps:\n\nIdentify Key Figures: Begin by pinpointing central individuals who have numerous connections with other nodes within the graph. These key figures often represent ancestors or influential family members whose relationships span across various branches.\nAnalyze Direct Connections: Next, analyze direct familial links between pairs of nodes to determine parent-child and sibling relationships. Look for patterns such as repeated interactions that suggest a strong likelihood of kinship.\nTrace Ancestral Links: Finally, trace ancestral connections by identifying recurring nodes that are connected to multiple individuals in the graph. These nodes likely represent common ancestors whose lineage can be traced through various family branches within the graph.\n\nBy following these steps, you will be able to construct a comprehensive genealogy of families depicted in the graph."
  },
  {
    "objectID": "quartopresentation.html#what-is-quarto",
    "href": "quartopresentation.html#what-is-quarto",
    "title": "Introduction to Quarto",
    "section": "What is Quarto?",
    "text": "What is Quarto?\nQuarto is a scientific and technical publishing system that allows users to create dynamic and reproducible documents, presentations, and more."
  },
  {
    "objectID": "quartopresentation.html#key-features",
    "href": "quartopresentation.html#key-features",
    "title": "Introduction to Quarto",
    "section": "Key Features",
    "text": "Key Features\n\nReproducibility: Integrates with Jupyter, RStudio, and Observable to support computational notebooks.\nFlexibility: Supports Markdown, R, Python, and other languages.\nOutput Formats: Generates output in multiple formats like HTML, PDF, and slides."
  },
  {
    "objectID": "quartopresentation.html#how-quarto-works",
    "href": "quartopresentation.html#how-quarto-works",
    "title": "Introduction to Quarto",
    "section": "How Quarto Works",
    "text": "How Quarto Works\n\nWrite content in Markdown or code chunks.\nUse Quarto commands to compile documents.\nDistribute or publish the output in various formats."
  },
  {
    "objectID": "quartopresentation.html#example-slide-with-code",
    "href": "quartopresentation.html#example-slide-with-code",
    "title": "Introduction to Quarto",
    "section": "Example Slide with Code",
    "text": "Example Slide with Code"
  },
  {
    "objectID": "quartoarticle.html",
    "href": "quartoarticle.html",
    "title": "Supply Chain Relation Map of Unilever",
    "section": "",
    "text": "Supply Chain Relation Map of Unilever\nHere is a comprehensive and simplified representation of Unilever’s supply chain, highlighting key entities and relationships:\n\nFarmers/Suppliers: Provide raw materials (agricultural products) to Unilever\n\nExamples: Cargill, Archer Daniels Midland, Bunge\nProducts: Wheat, corn, soybeans, sugar cane, coffee beans\n\nManufacturing Plants: Produce products for Unilever, serving as critical nodes in the supply chain\n\nExamples: Unilever’s own manufacturing facilities, such as the one in Port Sunlight, UK\nProducts: Soaps, shampoos, toothpaste, deodorants, cosmetics\n\nDistributors: Transport and store products for Unilever, connecting manufacturing plants to retailers\n\nExamples: Sysco, Gordon Food Service, US Foods\nProducts: Soaps, shampoos, toothpaste, deodorants, cosmetics\n\nLogistics Service Providers: Manage transportation and storage services for Unilever, ensuring efficient movement of goods\n\nExamples: DHL, FedEx, UPS\nServices: Transportation, warehousing, inventory management\n\nRetailers: Sell products to consumers, completing the flow of goods and services within Unilever’s supply chain\n\nExamples: Walmart, Target, CVS Pharmacy, Walgreens\nProducts: Soaps, shampoos, toothpaste, deodorants, cosmetics\n\n\nRelationships:\nThe relationships between these nodes are crucial in understanding Unilever’s supply chain. The map highlights the flow of goods and services from farmers/suppliers to manufacturing plants, then to distributors, logistics service providers, and finally to retailers.\nThis simplified representation provides a comprehensive overview of the key entities and relationships involved in Unilever’s supply chain, setting the stage for creating an accurate supply chain map.\nKey Takeaways:\n\nFarmers/Suppliers: Provide raw materials (agricultural products) to Unilever\nManufacturing Plants: Produce products for Unilever, serving as critical nodes in the supply chain\nDistributors: Transport and store products for Unilever, connecting manufacturing plants to retailers\nLogistics Service Providers: Manage transportation and storage services for Unilever, ensuring efficient movement of goods\nRetailers: Sell products to consumers, completing the flow of goods and services within Unilever’s supply chain\n\nInsights:\n\nUnderstanding Unilever’s operations is crucial for creating an accurate supply chain map.\nThe relationships between these nodes are critical in understanding Unilever’s supply chain.\nThis simplified representation provides a comprehensive overview of the key entities and relationships involved in Unilever’s supply chain.\n\nConclusion: This supply chain relation map of Unilever highlights the key entities and relationships involved in their supply chain, providing a comprehensive overview of the flow of goods and services from farmers/suppliers to retailers. By understanding these relationships, we can better appreciate the complexity and importance of Unilever’s supply chain.\n\n\n\n\n\n\n\nUnileverSupplyChain\n\n\n\nFarmers/Suppliers\n\nFarmers/Suppliers\n\n\n\nManufacturers\n\nManufacturers\n\n\n\nFarmers/Suppliers-&gt;Manufacturers\n\n\nRaw Materials\n\n\n\nDistributors\n\nDistributors\n\n\n\nManufacturers-&gt;Distributors\n\n\nInventory, Shipping, and Storage\n\n\n\nRetailers\n\nRetailers\n\n\n\nDistributors-&gt;Retailers\n\n\nFinal Point of Sale\n\n\n\nPackaging Suppliers\n\nPackaging Suppliers\n\n\n\nPackaging Suppliers-&gt;Manufacturers\n\n\nMaterials\n\n\n\nUnilever\n\nOwnership and Operation of Manufacturing Facilities vs. Contracting with Third-Party Manufacturers"
  },
  {
    "objectID": "reamdme.html",
    "href": "reamdme.html",
    "title": "LLMTESTAWESOME",
    "section": "",
    "text": "Hoe ga je de demo introduceren. &gt;&gt; Korte beschrijving geven van wat we proberen te doen. Power dynamics graph\nWe hebben de output een plaatje van de Output Mapping AI om data sets : Data Sets &gt; Dat doe je met een met een stukje dat een JSON file gaat outgeven Allerlij soorten Data;\nCancel de Demo: Verhaal is de warrig."
  },
  {
    "objectID": "TreeOfThoughts2.html",
    "href": "TreeOfThoughts2.html",
    "title": "Tree of thoughts",
    "section": "",
    "text": "%pip install langchain langchain_community \n\nDefaulting to user installation because normal site-packages is not writeable\nRequirement already satisfied: langchain in /home/chris/.local/lib/python3.10/site-packages (0.1.20)\nRequirement already satisfied: langchain_community in /home/chris/.local/lib/python3.10/site-packages (0.0.38)\nRequirement already satisfied: langsmith&lt;0.2.0,&gt;=0.1.17 in /home/chris/.local/lib/python3.10/site-packages (from langchain) (0.1.57)\nRequirement already satisfied: aiohttp&lt;4.0.0,&gt;=3.8.3 in /home/chris/.local/lib/python3.10/site-packages (from langchain) (3.9.5)\nRequirement already satisfied: async-timeout&lt;5.0.0,&gt;=4.0.0 in /home/chris/.local/lib/python3.10/site-packages (from langchain) (4.0.3)\nRequirement already satisfied: langchain-text-splitters&lt;0.1,&gt;=0.0.1 in /home/chris/.local/lib/python3.10/site-packages (from langchain) (0.0.1)\nRequirement already satisfied: requests&lt;3,&gt;=2 in /home/chris/.local/lib/python3.10/site-packages (from langchain) (2.31.0)\nRequirement already satisfied: tenacity&lt;9.0.0,&gt;=8.1.0 in /home/chris/.local/lib/python3.10/site-packages (from langchain) (8.3.0)\nRequirement already satisfied: PyYAML&gt;=5.3 in /usr/lib/python3/dist-packages (from langchain) (5.4.1)\nRequirement already satisfied: dataclasses-json&lt;0.7,&gt;=0.5.7 in /home/chris/.local/lib/python3.10/site-packages (from langchain) (0.6.6)\nRequirement already satisfied: langchain-core&lt;0.2.0,&gt;=0.1.52 in /home/chris/.local/lib/python3.10/site-packages (from langchain) (0.1.52)\nRequirement already satisfied: numpy&lt;2,&gt;=1 in /home/chris/.local/lib/python3.10/site-packages (from langchain) (1.26.4)\nRequirement already satisfied: SQLAlchemy&lt;3,&gt;=1.4 in /home/chris/.local/lib/python3.10/site-packages (from langchain) (2.0.30)\nRequirement already satisfied: pydantic&lt;3,&gt;=1 in /home/chris/.local/lib/python3.10/site-packages (from langchain) (2.7.1)\nRequirement already satisfied: yarl&lt;2.0,&gt;=1.0 in /home/chris/.local/lib/python3.10/site-packages (from aiohttp&lt;4.0.0,&gt;=3.8.3-&gt;langchain) (1.9.4)\nRequirement already satisfied: aiosignal&gt;=1.1.2 in /home/chris/.local/lib/python3.10/site-packages (from aiohttp&lt;4.0.0,&gt;=3.8.3-&gt;langchain) (1.3.1)\nRequirement already satisfied: multidict&lt;7.0,&gt;=4.5 in /home/chris/.local/lib/python3.10/site-packages (from aiohttp&lt;4.0.0,&gt;=3.8.3-&gt;langchain) (6.0.5)\nRequirement already satisfied: frozenlist&gt;=1.1.1 in /home/chris/.local/lib/python3.10/site-packages (from aiohttp&lt;4.0.0,&gt;=3.8.3-&gt;langchain) (1.4.1)\nRequirement already satisfied: attrs&gt;=17.3.0 in /home/chris/.local/lib/python3.10/site-packages (from aiohttp&lt;4.0.0,&gt;=3.8.3-&gt;langchain) (23.2.0)\nRequirement already satisfied: marshmallow&lt;4.0.0,&gt;=3.18.0 in /home/chris/.local/lib/python3.10/site-packages (from dataclasses-json&lt;0.7,&gt;=0.5.7-&gt;langchain) (3.21.2)\nRequirement already satisfied: typing-inspect&lt;1,&gt;=0.4.0 in /home/chris/.local/lib/python3.10/site-packages (from dataclasses-json&lt;0.7,&gt;=0.5.7-&gt;langchain) (0.9.0)\nRequirement already satisfied: packaging&lt;24.0,&gt;=23.2 in /home/chris/.local/lib/python3.10/site-packages (from langchain-core&lt;0.2.0,&gt;=0.1.52-&gt;langchain) (23.2)\nRequirement already satisfied: jsonpatch&lt;2.0,&gt;=1.33 in /home/chris/.local/lib/python3.10/site-packages (from langchain-core&lt;0.2.0,&gt;=0.1.52-&gt;langchain) (1.33)\nRequirement already satisfied: orjson&lt;4.0.0,&gt;=3.9.14 in /home/chris/.local/lib/python3.10/site-packages (from langsmith&lt;0.2.0,&gt;=0.1.17-&gt;langchain) (3.10.3)\nRequirement already satisfied: pydantic-core==2.18.2 in /home/chris/.local/lib/python3.10/site-packages (from pydantic&lt;3,&gt;=1-&gt;langchain) (2.18.2)\nRequirement already satisfied: annotated-types&gt;=0.4.0 in /home/chris/.local/lib/python3.10/site-packages (from pydantic&lt;3,&gt;=1-&gt;langchain) (0.6.0)\nRequirement already satisfied: typing-extensions&gt;=4.6.1 in /home/chris/.local/lib/python3.10/site-packages (from pydantic&lt;3,&gt;=1-&gt;langchain) (4.11.0)\nRequirement already satisfied: idna&lt;4,&gt;=2.5 in /home/chris/.local/lib/python3.10/site-packages (from requests&lt;3,&gt;=2-&gt;langchain) (3.7)\nRequirement already satisfied: certifi&gt;=2017.4.17 in /home/chris/.local/lib/python3.10/site-packages (from requests&lt;3,&gt;=2-&gt;langchain) (2024.2.2)\nRequirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in /home/chris/.local/lib/python3.10/site-packages (from requests&lt;3,&gt;=2-&gt;langchain) (2.2.1)\nRequirement already satisfied: charset-normalizer&lt;4,&gt;=2 in /home/chris/.local/lib/python3.10/site-packages (from requests&lt;3,&gt;=2-&gt;langchain) (3.3.2)\nRequirement already satisfied: greenlet!=0.4.17 in /home/chris/.local/lib/python3.10/site-packages (from SQLAlchemy&lt;3,&gt;=1.4-&gt;langchain) (3.0.3)\nRequirement already satisfied: jsonpointer&gt;=1.9 in /home/chris/.local/lib/python3.10/site-packages (from jsonpatch&lt;2.0,&gt;=1.33-&gt;langchain-core&lt;0.2.0,&gt;=0.1.52-&gt;langchain) (2.4)\nRequirement already satisfied: mypy-extensions&gt;=0.3.0 in /home/chris/.local/lib/python3.10/site-packages (from typing-inspect&lt;1,&gt;=0.4.0-&gt;dataclasses-json&lt;0.7,&gt;=0.5.7-&gt;langchain) (1.0.0)\nNote: you may need to restart the kernel to use updated packages.\nfrom langchain.prompts import ChatPromptTemplate, PromptTemplate\nfrom langchain_community.llms.ollama import Ollama\nfrom langchain.llms.openai import OpenAIChat\nfrom langchain_core.output_parsers.string import StrOutputParser\nfrom langchain_core.output_parsers.json import JsonOutputParser\nimport pandas as pd\nfrom IPython.display import display, Markdown\nllm = Ollama(model=\"llama3:latest\", num_ctx=4096, num_predict=1024, temperature=0.1)\n#llm = OpenAIChat(model=\"gpt-4\", temperature=0.1)\nquestion = \"give me the supplychain relation map of unilever?\"\nimport json\n\ndef load_graph(file):\n    with open(file) as f:\n        data = json.load(f)\n\n    text = \"```mermaid\\ngraph LR\\n\"\n    for item in data[\"links\"]:\n        text += f'\\t{item[\"source\"]} -- {item[\"value\"]} --&gt; {item[\"target\"]}\\n'\n    text += \"```\"\n    return text\ntext = load_graph(\"miserables_1.json\")\n\ngraph_length = len(text)\n\nprint(f\"Graph length: {graph_length}\")\ntext = \"no input data\"\n\nGraph length: 7352\ndisplay(Markdown(text))\n#display(text)\n\nno input data"
  },
  {
    "objectID": "TreeOfThoughts2.html#evaluate-pathways",
    "href": "TreeOfThoughts2.html#evaluate-pathways",
    "title": "Tree of thoughts",
    "section": "Evaluate Pathways",
    "text": "Evaluate Pathways\n\nprompt_evaluate = ChatPromptTemplate.from_template(\"\"\"\n## 3. Evaluate pathways:\n    Given the thoughts and the data, please evaluate and argue with evaluation criterias the pathways of each thought.\n    DO NOT answer the question yet.\n    DO ONLY format your output as 'markdown'.\n                                                   \n### Processed data\n{data}\n                                                   \n### List of thoughts\n{thoughts}\n                                                         \n### Question\n{question}\n\n\"\"\")\n\nchain_evaluate  = prompt_evaluate | llm | StrOutputParser()\nevaluation = chain_evaluate.invoke({\n    \"data\": text,\n    \"thoughts\": listOfThoughts,\n    \"question\": question\n    })\n\ndisplay(Markdown(evaluation))\n\n\nPathway Evaluation Criteria\n\nRelevance: How well does the pathway relate to the question or topic?\nClarity: Is the pathway clear and easy to understand?\nDepth: Does the pathway provide insight into the complexity of Unilever’s supply chain network?\nInterconnectedness: Are the entities and relationships in the pathway interconnected and logically sound?\n\n\n\nPathway Evaluations\n\nThought 1\n“Unilever’s supply chain network appears to be a complex system with multiple entities and relationships.” * Relevance: High * Clarity: High * Depth: Medium * Interconnectedness: High\n\n\nThought 2\n“The company has a vast portfolio of brands, which likely affects its supply chain operations.” * Relevance: Medium * Clarity: High * Depth: Low * Interconnectedness: Medium\n\n\nThought 3\n“Manufacturing facilities seem to play a crucial role in producing Unilever products.” * Relevance: High * Clarity: High * Depth: Medium * Interconnectedness: High\n\n\nThought 4\n“Distributors appear to manage inventory, shipping, and storage for Unilever products.” * Relevance: High * Clarity: High * Depth: Low * Interconnectedness: High\n\n\nThought 5\n“Retailers are the final point of sale for Unilever products, but their relationship with distributors is unclear.” * Relevance: Medium * Clarity: High * Depth: Low * Interconnectedness: Medium\n\n\nThought 6\n“Farmers/suppliers provide raw materials to Unilever’s manufacturing facilities, which may involve complex logistics.” * Relevance: High * Clarity: High * Depth: Medium * Interconnectedness: High\n\n\nThought 7\n“Packaging suppliers seem to play a key role in providing materials for Unilever products.” * Relevance: High * Clarity: High * Depth: Low * Interconnectedness: High\n\n\nThought 8\n“The actual supply chain network may be more complex than the simplified representation provided.” * Relevance: Medium * Clarity: High * Depth: High * Interconnectedness: High\n\n\nThought 9\n“Unilever’s ownership and operation of manufacturing facilities versus contracting with third-party manufacturers is an important consideration.” * Relevance: High * Clarity: High * Depth: Medium * Interconnectedness: High\n\n\nThought 10\n“The relationships between nodes (entities) are crucial to understanding Unilever’s supply chain dynamics.” * Relevance: High * Clarity: High * Depth: High * Interconnectedness: High"
  },
  {
    "objectID": "TreeOfThoughts2.html#synthesize-pathway-evaluation",
    "href": "TreeOfThoughts2.html#synthesize-pathway-evaluation",
    "title": "Tree of thoughts",
    "section": "Synthesize Pathway Evaluation",
    "text": "Synthesize Pathway Evaluation\n\nprompt_synthesize_evaluate = ChatPromptTemplate.from_template(\"\"\"\n## 4. Evaluate pathways:\n    Synthesize the data gathered from thoughts list and evaluation pathways\n    Create a comprehensive synthesis for answering the question: {question}.\n    DO NOT answer the question yet.\n    DO process all thoughts\n                                                   \n### List of thoughts\n{thoughts}\n\n### Pathways evaluation\n{evaluation}\n                                                         \n### Question\n{question}\n\n\"\"\")\n\nchain_synthesize_evaluate  = prompt_synthesize_evaluate | llm | StrOutputParser()\nsynthesis = chain_synthesize_evaluate.invoke({\n    \"data\": text,\n    \"thoughts\": listOfThoughts,\n    \"evaluation\": evaluation,\n    \"question\": question\n    })\n\n\n\ndisplay(Markdown(synthesis))\n\nBased on the evaluation of the pathways, I will synthesize the data gathered from thoughts list and create a comprehensive synthesis for answering the question.\nSupply Chain Relation Map of Unilever\nThe supply chain network of Unilever appears to be a complex system with multiple entities and relationships. The company’s vast portfolio of brands likely affects its supply chain operations, which are managed by manufacturing facilities that produce Unilever products. Distributors play a crucial role in managing inventory, shipping, and storage for these products.\nFarmers/suppliers provide raw materials to Unilever’s manufacturing facilities, which may involve complex logistics. Packaging suppliers also seem to play a key role in providing materials for Unilever products. The actual supply chain network may be more complex than the simplified representation provided, with relationships between nodes (entities) being crucial to understanding Unilever’s supply chain dynamics.\nKey Relationships:\n\nManufacturers → Distributors (inventory, shipping, and storage)\nDistributors → Retailers (final point of sale)\nFarmers/Suppliers → Manufacturers (raw materials)\nPackaging Suppliers → Manufacturers (materials)\n\nConsiderations:\n\nOwnership and operation of manufacturing facilities versus contracting with third-party manufacturers\nComplexity of logistics involved in providing raw materials from farmers/suppliers to manufacturers\n\nThis supply chain relation map provides a comprehensive overview of the relationships between entities in Unilever’s supply chain network. It highlights the importance of considering the complexity of logistics, ownership and operation of manufacturing facilities, and the relationships between nodes (entities) in understanding Unilever’s supply chain dynamics.\nPlease note that this is not an exhaustive or definitive answer to the question, but rather a synthesis of the data gathered from the thoughts list and evaluation pathways."
  },
  {
    "objectID": "TreeOfThoughts2.html#formulate-conclusions",
    "href": "TreeOfThoughts2.html#formulate-conclusions",
    "title": "Tree of thoughts",
    "section": "Formulate Conclusions",
    "text": "Formulate Conclusions\n\nprompt_formulate = ChatPromptTemplate.from_template(\"\"\"\n## 5. Formulate answer:\n    Given the synthesized data, please formulate a final answer to the question: {question}.\n    DO be specific with names of companies, suppliers and products.\n    DO give product names and ingredients.\n    DO only formulate the final answer to the user.\n    DO create a comprehensive and engaging article that supplychain professionals would find intresting.\n    DO use 2000 words using markdown syntax, with sections and subsections.\n    DO write a paragraph for each thought and evaluation pathline\n    DO NOT give any URL's or links as references\n\n### Thoughts                                   \n{thoughts} \n\n### Evaluation                                   \n{evaluation}\n\n### Synthesis                                   \n{synthesis}\n                                                         \n### Question\n{question}\n\n\"\"\")\n\nchain_formulate  = prompt_formulate | llm | StrOutputParser()\nformulatedoutput = chain_formulate.invoke({\n    \"synthesis\": synthesis,\n    \"thoughts\": listOfThoughts,\n    \"evaluation\": evaluation,\n    \"question\": question\n    })\n\ndisplay(Markdown(formulatedoutput))\n\nSupply Chain Relation Map of Unilever\nThe supply chain network of Unilever appears to be a complex system with multiple entities and relationships. The company’s vast portfolio of brands likely affects its supply chain operations, which are managed by manufacturing facilities that produce Unilever products.\n\nKey Entities:\n\nUnilever: The parent company responsible for managing the supply chain.\nManufacturing Facilities (owned/operated by Unilever): Responsible for producing Unilever products.\nDistributors: Manage inventory, shipping, and storage for Unilever products.\nRetailers: The final point of sale for Unilever products.\nFarmers/Suppliers: Provide raw materials to Unilever’s manufacturing facilities.\nPackaging Suppliers: Provide materials for Unilever products.\n\n\n\nRelationships:\n\nUnilever → Manufacturing Facilities (production of products): Unilever provides the necessary resources and guidance for its manufacturing facilities to produce its products.\nManufacturing Facilities → Distributors (shipping and storage): The manufactured products are shipped to distributors, who manage inventory, shipping, and storage.\nDistributors → Retailers (inventory management and shipping): Distributors manage the inventory and shipping of Unilever products to retailers.\nFarmers/Suppliers → Manufacturing Facilities (raw materials provision): Farmers/suppliers provide raw materials to Unilever’s manufacturing facilities, which may involve complex logistics.\nPackaging Suppliers → Unilever (materials provision): Packaging suppliers provide materials for Unilever products.\n\n\n\nNotes:\n\nThe relationships between nodes are crucial to understanding Unilever’s supply chain dynamics.\nThe actual supply chain network may be more complex than the simplified representation provided.\n\nThis comprehensive synthesis provides a detailed and interconnected view of Unilever’s supply chain relation map, highlighting the key entities and relationships involved in its supply chain operations.\n\n\n\n\nprompt_diagram = ChatPromptTemplate.from_template(\"\"\"\n## 5. Formulate answer:\n    Given the synthesized data, please make a final answer to the question: {question}.\n    DO be specific with names of companies, suppliers and products.\n    DO give product names and ingredients.\n    DO ONLY formulate the final answer to the user.\n    DO ONLY produce a graviz diagram of the supplychain\n    Make sure the graviz syntax is valid\n   \n\n### Thoughts                                   \n{thoughts} \n\n### Evaluation                                   \n{evaluation}\n\n### Synthesis                                   \n{synthesis}\n\n### Formulated output                                   \n{formulatedoutput}\n                                                         \n### Question\n{question}\n\n\"\"\")\n\nchain_diagram  = prompt_diagram | llm | StrOutputParser()\ndiagram = chain_diagram.invoke({\n    \"synthesis\": synthesis,\n    \"thoughts\": listOfThoughts,\n    \"evaluation\": evaluation,\n    \"formulatedoutput\": formulatedoutput,\n    \"question\": question\n    })\n\ndisplay(Markdown(diagram))\n\nHere is the formulated output:\ndigraph SupplyChainRelationMapOfUnilever {\n    node[shape=box, style=filled];\n    Unilever[label=\"Unilever\"];\n    ManufacturingFacilities[label=\"Manufacturing Facilities (owned/operated by Unilever)\"];\n    Distributors[label=\"Distributors\"];\n    Retailers[label=\"Retailers\"];\n    FarmersSuppliers[label=\"Farmers/Suppliers\"];\n    PackagingSuppliers[label=\"Packaging Suppliers\"];\n\n    Unilever -&gt; ManufacturingFacilities[label=\"production of products\"];\n    ManufacturingFacilities -&gt; Distributors[label=\"shipping and storage\"];\n    Distributors -&gt; Retailers[label=\"inventory management and shipping\"];\n    FarmersSuppliers -&gt; ManufacturingFacilities[label=\"raw materials provision\"];\n    PackagingSuppliers -&gt; Unilever[label=\"materials provision\"];\n\n    label = \"Supply Chain Relation Map of Unilever\";\n}\nThis is a Graviz diagram that represents the supply chain relation map of Unilever. The nodes represent the key entities involved in Unilever’s supply chain operations, and the edges represent the relationships between these entities.\n\n\n\nsynthesis\n\n\"**Supply Chain Relation Map of Unilever**\\n=====================================================\\n\\nHere is a comprehensive and simplified representation of Unilever's supply chain, highlighting key entities and relationships:\\n\\n* **Farmers/Suppliers**: Provide raw materials (agricultural products) to Unilever\\n\\t+ Examples: Cargill, Archer Daniels Midland, Bunge\\n\\t+ Products: Wheat, corn, soybeans, sugar cane, coffee beans\\n* **Manufacturing Plants**: Produce products for Unilever, serving as critical nodes in the supply chain\\n\\t+ Examples: Unilever's own manufacturing facilities, such as the one in Port Sunlight, UK\\n\\t+ Products: Soaps, shampoos, toothpaste, deodorants, cosmetics\\n* **Distributors**: Transport and store products for Unilever, connecting manufacturing plants to retailers\\n\\t+ Examples: Sysco, Gordon Food Service, US Foods\\n\\t+ Products: Soaps, shampoos, toothpaste, deodorants, cosmetics\\n* **Logistics Service Providers**: Manage transportation and storage services for Unilever, ensuring efficient movement of goods\\n\\t+ Examples: DHL, FedEx, UPS\\n\\t+ Services: Transportation, warehousing, inventory management\\n* **Retailers**: Sell products to consumers, completing the flow of goods and services within Unilever's supply chain\\n\\t+ Examples: Walmart, Target, CVS Pharmacy, Walgreens\\n\\t+ Products: Soaps, shampoos, toothpaste, deodorants, cosmetics\\n\\n**Relationships:**\\n\\n\\nThe relationships between these nodes are crucial in understanding Unilever's supply chain. The map highlights the flow of goods and services from farmers/suppliers to manufacturing plants, then to distributors, logistics service providers, and finally to retailers.\\n\\nThis simplified representation provides a comprehensive overview of the key entities and relationships involved in Unilever's supply chain, setting the stage for creating an accurate supply chain map.\\n\\n**Key Takeaways:**\\n\\n1. **Farmers/Suppliers**: Provide raw materials (agricultural products) to Unilever\\n2. **Manufacturing Plants**: Produce products for Unilever, serving as critical nodes in the supply chain\\n3. **Distributors**: Transport and store products for Unilever, connecting manufacturing plants to retailers\\n4. **Logistics Service Providers**: Manage transportation and storage services for Unilever, ensuring efficient movement of goods\\n5. **Retailers**: Sell products to consumers, completing the flow of goods and services within Unilever's supply chain\\n\\n**Insights:**\\n\\n1. Understanding Unilever's operations is crucial for creating an accurate supply chain map.\\n2. The relationships between these nodes are critical in understanding Unilever's supply chain.\\n3. This simplified representation provides a comprehensive overview of the key entities and relationships involved in Unilever's supply chain.\\n\\n**Conclusion:**\\nThis supply chain relation map of Unilever highlights the key entities and relationships involved in their supply chain, providing a comprehensive overview of the flow of goods and services from farmers/suppliers to retailers. By understanding these relationships, we can better appreciate the complexity and importance of Unilever's supply chain.\""
  },
  {
    "objectID": "VhcPresentation.html#welcome-introduction",
    "href": "VhcPresentation.html#welcome-introduction",
    "title": "VHC sprint",
    "section": "Welcome & Introduction",
    "text": "Welcome & Introduction\n\nDate: 15-5-2024\nPresenter: Chris Verhoef\nObjective: Review the progress of our AI Supply Chain Tool development"
  },
  {
    "objectID": "VhcPresentation.html#sprint-overview",
    "href": "VhcPresentation.html#sprint-overview",
    "title": "VHC sprint",
    "section": "Sprint Overview",
    "text": "Sprint Overview\n\nSprint Goals: Visualize Power Dynamics Ecosystem: For the upcoming demo, develop a feature to visualize the entire ecosystem based on a company name within 20 minutes."
  },
  {
    "objectID": "VhcPresentation.html#work-completed",
    "href": "VhcPresentation.html#work-completed",
    "title": "VHC sprint",
    "section": "Work Completed",
    "text": "Work Completed\n::: incremental\n\nPrototype to take company name and output a basic visualization of the ecosystem\nTest the prototype to ensure it meets the basic functional requirements.\nUI Enhancements: Improved dashboard for better user interaction.\nEnhance the visualization tool to include more detailed interactions and connections within the ecosystem.\nOptimize the back-end processes to ensure that the visualization is generated within the 20-minute timeframe.\nComplete the development of the initial visualization tool capable of representing power dynamics based solely on a company name.\nExpand the visualization tool to integrate product data along with the company name.\nDesign and implement a user-friendly interface that allows users to easily input a company name and initiate the visualization process.\nEnsure the interface is intuitive and guides the user through the visualization generation."
  },
  {
    "objectID": "VhcPresentation.html#key-achievements",
    "href": "VhcPresentation.html#key-achievements",
    "title": "VHC sprint",
    "section": "Key Achievements",
    "text": "Key Achievements\n\nMajor Achievement: Successful prototype of supplychain mapping;\nImpact on Project: Allows us to see a first workable version of the program.\nCompleted Product Increments:\n\nReal-time data processing pipeline.\nReal-time Systhesys of a company data map.\nUser interface for data manipulation and adjustment.\nIntergration into workbook with nice interface allows non-tech users to join the project.\nModel overview Intergration allows us to watch A.I “think” in real time."
  },
  {
    "objectID": "VhcPresentation.html#challenges-faced",
    "href": "VhcPresentation.html#challenges-faced",
    "title": "VHC sprint",
    "section": "Challenges Faced",
    "text": "Challenges Faced\n\nSignificant Challenges:\n\n\n\n\nData inconsistency across sources.\n\nInability for the A.I to produce a result that the previous visualization tool could correctly prase.\nAccess to good data sources and an example\nInitial model underperformance, Tokensize is very limited to 9000 characters.\nHardware limitations, inability to train faster.\nInability to parse data effectively into system\nAI model training takes significant time\nAI model “Hallucinates”\nChris does his best but he needs to be a data-engineer, ai-engineer, full stack programmer all in one.\n\nCreating presentations and formats in PowerPoint always take a very long time.\n\nHard to keep head focused on a project that is very big where learning still needs to happen.\n“good Path” often changes mid-way due to discovery that it’s impossible.\nReality of time is different that real time, 6 days turns out to be 3.\nSignificant stress due to “significant difference between what is promised and what is shown”"
  },
  {
    "objectID": "VhcPresentation.html#product-demonstration",
    "href": "VhcPresentation.html#product-demonstration",
    "title": "VHC sprint",
    "section": "Product Demonstration",
    "text": "Product Demonstration\n\nLive Demo: Showcasing the Chain of Thought one\nFeature Explanation: Detailed overview of data inputs and machine learning outputs.\nInteraction Scenarios: Taking a Present Data Supplychain set and mapping this out, to determine the relationship between them. – Question that is posed: Between the characters of the “Miserables” what is the connection? – Features shown"
  },
  {
    "objectID": "VhcPresentation.html#feedback-questions",
    "href": "VhcPresentation.html#feedback-questions",
    "title": "VHC sprint",
    "section": "Feedback & Questions",
    "text": "Feedback & Questions\n\nQuestions Received:\n\nConcerns about data privacy\nQuestions about integration with existing ERP systems\n\nFeedback Incorporation:\n\nPlan to enhance data encryption\nRoadmap for ERP integration by next quarter"
  },
  {
    "objectID": "VhcPresentation.html#sprint-metrics",
    "href": "VhcPresentation.html#sprint-metrics",
    "title": "VHC sprint",
    "section": "Sprint Metrics",
    "text": "Sprint Metrics\n\nVelocity Chart: Display of completed story points over time.\nBurndown Chart: Current sprint progress.\nOther Metrics: Accuracy improvements of the forecasting model."
  },
  {
    "objectID": "VhcPresentation.html#plan-for-next-sprint",
    "href": "VhcPresentation.html#plan-for-next-sprint",
    "title": "VHC sprint",
    "section": "Plan for Next Sprint",
    "text": "Plan for Next Sprint\n\nObjectives:\n\nMake sure the AI iterates over every part of the supplchain, nultitier Suppliers, 2,3,4-de 5de niveau toega.\nTraining the AI model to be specific; Unilever - ASML - 1ste lijns, tweede lijns. Derde Lijns.\nAdd to the Product Limitation; (a razos blade of Philps) A Specific Product;\nWe want to see an improvement of the meeting; Can I see the an Improvement of the mapping.\nGo back to the Graphical Display to map out the Supplychain\n\nPlanned Tasks:\n\nCollect more diverse data sets\nWork on backend modifications for ERP integration\n\nAdjustments Based on Feedback:\n\nFocus on data security enhancements"
  },
  {
    "objectID": "VhcPresentation.html#conclusion",
    "href": "VhcPresentation.html#conclusion",
    "title": "VHC sprint",
    "section": "Conclusion",
    "text": "Conclusion\n\nSummary: Reviewed the advancements made in our AI tool for enhancing supply chain efficiency.\nNext Steps:\n\nContinue development and testing of the forecasting model\nInitiate stakeholder meetings for next-phase planning\n\nThank You: Special thanks to the team and stakeholders for ongoing support and feedback."
  },
  {
    "objectID": "VhcPresentation.html#key-milestones-continued",
    "href": "VhcPresentation.html#key-milestones-continued",
    "title": "VHC sprint",
    "section": "Key Milestones Continued",
    "text": "Key Milestones Continued\n\nKey Milestones - continued:\n\nDesign and implement a user-friendly interface that allows users to easily input a company name and initiate the visualization process.\nEnsure the interface is intuitive and guides the user through the visualization generation.\nCollect and analyze requirements specific to the ecosystem visualization.\nIdentify the key attributes and data points needed to represent the ecosystem accurately based on a company name.\nInitial model training\nReview the completed feature with stakeholders to gather feedback and make any necessary adjustments.\nFinalize the tool for the demo, ensuring it meets all expectations and requirements."
  },
  {
    "objectID": "VhcPresentation.html#mitigating-and-moving-foward",
    "href": "VhcPresentation.html#mitigating-and-moving-foward",
    "title": "VHC sprint",
    "section": "Mitigating and moving foward",
    "text": "Mitigating and moving foward\n\nconcerns addressed by:\n\nImplementing a data cleansing process\nNow using a Programmer and Data engineering presenting style, you are looking at it!\nJuypter Notebook intergration directly into code;\nModel overview tester to show differences\nChain of Thought model prompting for more accurate results\n\nRemaining Concerns: Adding significant data and parsing and inability to see how that will work, Chris needs to learn."
  },
  {
    "objectID": "VhcPresentation.html#chain-of-thought-prompting",
    "href": "VhcPresentation.html#chain-of-thought-prompting",
    "title": "VHC sprint",
    "section": "Chain of Thought Prompting",
    "text": "Chain of Thought Prompting\n\n\n\n\n\ngraph LR;\n    A[Process Inputs] --&gt; B[Create Thoughts];\n    B --&gt; C[Evaluate Pathways];\n    C --&gt; D[Summarize Results];\n    D --&gt; E[Formulate Conclusions];\n\n\n\n\n\n\n\nStep 1: Focus on acquiring and organizing all necessary inputs that will inform the subsequent stages of thinking.\n\nStep 2: Develop coherent thoughts that logically follow from the processed inputs.\n\nStep 3: Critically evaluate each pathway to determine its feasibility and relevance.\n\nStep 4: Aggregate and synthesize the results to provide a clear overview of what has been discovered or concluded so far.\n\nStep 5: Make informed decisions or conclusions that are supported by the summarized findings and ready to be implemented or communicated."
  },
  {
    "objectID": "VhcPresentation.html#prototype-development-and-initial-testing",
    "href": "VhcPresentation.html#prototype-development-and-initial-testing",
    "title": "VHC sprint",
    "section": "Prototype Development and Initial Testing",
    "text": "Prototype Development and Initial Testing\n\nDevelop an initial prototype for inputting a company name to generate an ecosystem visualization.\nModel visualization needs somewhat accurate."
  },
  {
    "objectID": "VhcPresentation.html#feature-enhancement-and-system-optimization",
    "href": "VhcPresentation.html#feature-enhancement-and-system-optimization",
    "title": "VHC sprint",
    "section": "Feature Enhancement and System Optimization",
    "text": "Feature Enhancement and System Optimization\n\nEnhance visualization features to include detailed ecosystem interactions.\nOptimize backend processes to achieve visualization generation within the 20-minute target."
  },
  {
    "objectID": "VhcPresentation.html#interface-design-and-requirement-analysis",
    "href": "VhcPresentation.html#interface-design-and-requirement-analysis",
    "title": "VHC sprint",
    "section": "Interface Design and Requirement Analysis",
    "text": "Interface Design and Requirement Analysis\n\nDesign a user-friendly interface for easy initiation of the visualization process.\nAnalyze requirements to accurately represent the ecosystem based on essential data points."
  },
  {
    "objectID": "VhcPresentation.html#integration-and-final-preparations",
    "href": "VhcPresentation.html#integration-and-final-preparations",
    "title": "VHC sprint",
    "section": "Integration and Final Preparations",
    "text": "Integration and Final Preparations\n\nExpand tool capabilities to integrate product data alongside company names.\nFinalize the tool with stakeholder feedback, ensuring readiness for the demo."
  },
  {
    "objectID": "VhcPresentation.html#key-achievement-2",
    "href": "VhcPresentation.html#key-achievement-2",
    "title": "VHC sprint",
    "section": "Key Achievement 2",
    "text": "Key Achievement 2\n\n**Major Achievement: Reached Bedrock! This is something we can build upon!\nImpact on Project: Chris will no longer need to make a whole new project every time he makes a small adjustment!\nCompleted Project increments:\n\nKey tools and guides gathered for the good path.\nFinally something workable."
  },
  {
    "objectID": "VhcPresentation.html#significant-side-challanges",
    "href": "VhcPresentation.html#significant-side-challanges",
    "title": "VHC sprint",
    "section": "Significant side challanges:",
    "text": "Significant side challanges:"
  },
  {
    "objectID": "VhcPresentation.html#why-chain-of-thoughts-all-of-a-sudden.",
    "href": "VhcPresentation.html#why-chain-of-thoughts-all-of-a-sudden.",
    "title": "VHC sprint",
    "section": "Why Chain of Thoughts all of a sudden.",
    "text": "Why Chain of Thoughts all of a sudden.\n\n\n\n\n\n\nAspect\nChain of Thoughts\nSingle LLM\n\n\n\n\nComplexity and Detail\nBreaks down complexities into manageable insights, capturing detailed interdependencies.\nMay overlook nuanced details due to generalized training data.\n\n\nAdaptability and Flexibility\nAllows iterative reassessment and refinements, crucial for dynamic environments.\nConstrained by initial training, less adaptive to new scenarios.\n\n\nRisk Identification and Mitigation\nEnables comprehensive risk analysis from multiple perspectives and scenarios.\nPotentially misses emerging or non-obvious risks, limited by training scope.\n\n\nCustomization and Specificity\nTailored analysis specific to operational needs and strategic goals.\nGeneralizes based on broad datasets, may neglect organization-specific needs."
  },
  {
    "objectID": "VhcPresentation.html#language-model-integration",
    "href": "VhcPresentation.html#language-model-integration",
    "title": "VHC sprint",
    "section": "Language Model Integration:",
    "text": "Language Model Integration:\nThe notebook integrates two language models, Ollama with enhanced context capabilities and OpenAIChat from OpenAI’s GPT models, to process text inputs.\nData Processing and Visualization:\nA function, load_graph, loads data from a JSON file and converts it into a Mermaid graph format for visualization within the notebook."
  },
  {
    "objectID": "VhcPresentation.html#data-processing-and-visualization",
    "href": "VhcPresentation.html#data-processing-and-visualization",
    "title": "VHC sprint",
    "section": "Data Processing and Visualization:",
    "text": "Data Processing and Visualization:\nA function, load_graph, loads data from a JSON file and converts it into a Mermaid graph format for visualization within the notebook."
  },
  {
    "objectID": "VhcPresentation.html#chain-of-thoughts-processing",
    "href": "VhcPresentation.html#chain-of-thoughts-processing",
    "title": "VHC sprint",
    "section": "Chain of Thoughts Processing:",
    "text": "Chain of Thoughts Processing:\nImplements a structured data processing approach that sequentially processes data through stages: input processing, thought creation, pathway evaluation, and conclusion formulation, using custom templates for each stage.\nCustom Templates for Language Models:\nUses ChatPromptTemplate and PromptTemplate to define structured prompts that guide the language models’ responses, ensuring that each step of the process is contextually relevant to the previous outputs.\nDynamic Content Rendering:\nOutputs from language model processing are rendered as Markdown, allowing for dynamic presentation of both textual and graphical data in the notebook environment. Iterative and Conditional Processing:\nThe notebook demonstrates the ability to loop over data iteratively and conditionally based on the outputs from each stage of the processing chain, refining the results with each iteration."
  },
  {
    "objectID": "VhcPresentation.html#synthesis-of-complex-data",
    "href": "VhcPresentation.html#synthesis-of-complex-data",
    "title": "VHC sprint",
    "section": "Synthesis of Complex Data:",
    "text": "Synthesis of Complex Data:\nIt synthesizes complex data from multiple processing steps into a coherent plan or conclusion, demonstrating advanced data handling and decision-making capabilities.\nInteractive Markdown Display:\nMarkdown is used extensively to display both code-generated graphics and language model outputs interactively, enhancing the readability and user engagement with the notebook content."
  },
  {
    "objectID": "VhcPresentation.html#map",
    "href": "VhcPresentation.html#map",
    "title": "VHC sprint",
    "section": "MAP",
    "text": "MAP\n\n\n\n\n\n\n\nASML_Supply_Chain\n\n\n\nASML\n\nASML Holding N.V.\n\n\n\nIntel\n\nIntel Corporation\n\n\n\nASML-&gt;Intel\n\n\nSemiconductor Equipment Sales\n\n\n\nSamsung\n\nSamsung Electronics Co., Ltd.\n\n\n\nASML-&gt;Samsung\n\n\nSemiconductor Equipment Sales\n\n\n\nTSMC\n\nTaiwan Semiconductor Manufacturing Company (TSMC)\n\n\n\nASML-&gt;TSMC\n\n\nSemiconductor Equipment Sales\n\n\n\nGlobalFoundries\n\nGlobalFoundries Inc.\n\n\n\nASML-&gt;GlobalFoundries\n\n\nSemiconductor Equipment Sales\n\n\n\nIntel-&gt;ASML\n\n\nSemiconductor Equipment Purchases\n\n\n\nSamsung-&gt;ASML\n\n\nSemiconductor Equipment Purchases\n\n\n\nTSMC-&gt;ASML\n\n\nSemiconductor Equipment Purchases\n\n\n\nGlobalFoundries-&gt;ASML\n\n\nSemiconductor Equipment Purchases\n\n\n\nOther Suppliers\n\nVarious Other Suppliers\n\n\n\nOther\n\nOther\n\n\n\nSuppliers\n\nSuppliers\n\n\n\nSuppliers-&gt;ASML\n\n\nComponents, Materials, and Services\n\n\n\nSpecialty\n\nSpecialty\n\n\n\nSuppliers-&gt;Specialty\n\n\n\n\n\nPackaging\n\nPackaging\n\n\n\nSuppliers-&gt;Packaging\n\n\n\n\n\nAssembly\n\nAssembly\n\n\n\nSuppliers-&gt;Assembly\n\n\n\n\n\nSpecialty Chemicals\n\nSpecialty Chemicals Inc.\n\n\n\nPackaging Materials\n\nPackaging Materials Co., Ltd.\n\n\n\nAssembly Services\n\nAssembly Services Inc.\n\n\n\nChemicals\n\nChemicals\n\n\n\nMaterials\n\nPackaging Materials\n\n\n\nServices\n\nAssembly Services"
  }
]